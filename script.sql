-- 1
CREATE DATABASE TERMITE_ZOO_DB;
USE DATABASE TERMITE_ZOO_DB;
CREATE SCHEMA ZOO_SCHEMA;
USE SCHEMA ZOO_SCHEMA;

-- 2
CREATE TABLE ZOO_DATA (RAW_JSON VARIANT);
SELECT * FROM ZOO_DATA;
-- DROP TABLE ZOO_DATA;

-- 3.1
SELECT
    RAW_JSON:zooName::STRING AS ZooName,
    RAW_JSON:location::STRING AS Location
FROM ZOO_DATA;

-- 3.2
SELECT
    RAW_JSON:director.name::STRING AS DirectorName,
    RAW_JSON:director.species::STRING AS DirectorSpecies
FROM ZOO_DATA;

-- 3.3
SELECT
    VALUE:name::STRING AS CreatureName,
    VALUE:species::STRING AS CreatureSpecies
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures);

-- 3.4
SELECT
    VALUE:name::STRING AS CreatureName
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures)
WHERE VALUE:originPlanet::STRING = 'Xylar';

-- 3.5
SELECT
    VALUE:name::STRING AS HabitatName,
    VALUE:environmentType::STRING AS EnvironmentType
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:habitats)
WHERE VALUE:sizeSqMeters::NUMBER > 2000;

-- 3.6
SELECT
    CREATURES.VALUE:name::STRING AS CreatureName
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures) AS CREATURES,
LATERAL FLATTEN(INPUT => VALUE:specialAbilities) AS ABILITIES
WHERE ABILITIES.VALUE::STRING = 'Camouflage';

-- 3.7
SELECT
    VALUE:name::STRING AS CreatureName,
    VALUE:healthStatus.status::STRING AS HealthStatus
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures)
WHERE VALUE:healthStatus.status::STRING != 'Excellent';

-- 3.8
SELECT
    STAFF.VALUE:name::STRING AS StaffName,
    STAFF.VALUE:role::STRING AS StaffRole
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:staff) AS STAFF,
LATERAL FLATTEN(INPUT => STAFF.VALUE:assignedHabitatIds) AS HABITAT_IDS
WHERE HABITAT_IDS.VALUE::STRING = 'H001';

-- 3.9
SELECT
    CREATURES.VALUE:habitatId::STRING AS HabitatId,
    COUNT(*) AS CreatureCount
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures) AS CREATURES
GROUP BY 1;

-- 3.10
SELECT DISTINCT
    FEATURE.VALUE::STRING AS Feature
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:habitats) AS HABITATS,
LATERAL FLATTEN(INPUT => HABITATS.VALUE:features) AS FEATURE;

-- 3.11
SELECT
    VALUE:name::STRING AS EventName,
    VALUE:type::STRING AS EventType,
    VALUE:scheduledTime::TIMESTAMP AS ScheduledTime
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:upcomingEvents);

-- 3.12
SELECT
    CREATURES.VALUE:name::STRING AS CreatureName,
    HABITATS.VALUE:environmentType::STRING AS EnvironmentType
FROM ZOO_DATA,
LATERAL FLATTEN(INPUT => RAW_JSON:creatures) AS CREATURES,
LATERAL FLATTEN(INPUT => RAW_JSON:habitats) AS HABITATS
WHERE CREATURES.VALUE:habitatId::STRING = HABITATS.VALUE:id::STRING;